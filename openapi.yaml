openapi: 3.0.0
info:
  title: TechiProConnect API
  version: 1.0.0
  description: API documentation for TechiProConnect
servers:
  - url: http://localhost:3000/api/v1
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /users:
    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User created
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    get:
      summary: Get paginated list of users
      tags: [Users]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Page size
      responses:
        '200':
          description: Paginated users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserResponse'
  /technicians:
    post:
      summary: Create a new technician
      tags: [Technicians]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
                categoryId:
                  type: integer
      responses:
        '201':
          description: Technician created
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    get:
      summary: Get paginated list of technicians
      tags: [Technicians]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Page size
      responses:
        '200':
          description: Paginated technicians
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTechnicianResponse'
  /services:
    post:
      summary: Create a new service
      tags: [Services]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                price:
                  type: number
                technicianId:
                  type: string
      responses:
        '201':
          description: Service created
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    get:
      summary: Get paginated list of services
      tags: [Services]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Page size
      responses:
        '200':
          description: Paginated services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedServiceResponse'
  /categories:
    post:
      summary: Create a new category
      tags: [Categories]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Category created
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /ratings:
    post:
      summary: Create a new rating
      tags: [Ratings]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                score:
                  type: integer
                comment:
                  type: string
                technicianId:
                  type: string
                userId:
                  type: string
      responses:
        '201':
          description: Rating created
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /payments:
    post:
      summary: Make a payment
      tags: [Payments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                appointmentId:
                  type: string
                amount:
                  type: number
                phoneNumber:
                  type: string
      responses:
        '201':
          description: Payment initiated
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /locations:
    post:
      summary: Upsert a location
      tags: [Locations]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                latitude:
                  type: number
                longitude:
                  type: number
                address:
                  type: string
      responses:
        '200':
          description: Location upserted
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /appointments:
    post:
      summary: Create an appointment
      tags: [Appointments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                technicianId:
                  type: string
                serviceType:
                  type: string
                appointmentDate:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Appointment created
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /forgot-password:
    post:
      summary: Request password reset
      tags: [ForgotPassword]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Password reset email sent
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /reset-password:
    post:
      summary: Reset password
      tags: [ForgotPassword]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
      responses:
        '200':
          description: Password reset successfully
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /messages/appointment/{appointmentId}:
    get:
      summary: Get paginated chat messages for an appointment
      tags: [Messages]
      parameters:
        - in: path
          name: appointmentId
          required: true
          schema:
            type: integer
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
          description: Page size
      responses:
        '200':
          description: Paginated messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedMessageResponse'
        '403':
          description: Forbidden
  /payments/daraja:
    post:
      summary: Simulate Daraja payment
      tags: [Payments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                appointmentId:
                  type: integer
                amount:
                  type: number
                phoneNumber:
                  type: string
      responses:
        '201':
          description: Payment successful (simulated)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          description: Validation error
  /notifications/register:
    post:
      summary: Register device token for push notifications
      tags: [Notifications]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '201':
          description: Device token registered
  /notifications/send:
    post:
      summary: Send push notification (ADMIN only)
      tags: [Notifications]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
      responses:
        '200':
          description: Notification sent
components:
  schemas:
    ValidationError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              msg:
                type: string
              param:
                type: string
    Message:
      type: object
      properties:
        id:
          type: integer
        senderId:
          type: string
        receiverId:
          type: string
        content:
          type: string
        sentAt:
          type: string
          format: date-time
        appointmentId:
          type: integer
    Payment:
      type: object
      properties:
        id:
          type: integer
        appointmentId:
          type: integer
        transactionId:
          type: string
        amount:
          type: number
        status:
          type: string
        createdAt:
          type: string
          format: date-time
    DeviceToken:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: string
        token:
          type: string
        createdAt:
          type: string
          format: date-time
    NotificationRequest:
      type: object
      properties:
        token:
          type: string
        title:
          type: string
        body:
          type: string
        data:
          type: object
    PaginatedUserResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/User'
        total:
          type: integer
        page:
          type: integer
        pageSize:
          type: integer
    PaginatedTechnicianResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Technician'
        total:
          type: integer
        page:
          type: integer
        pageSize:
          type: integer
    PaginatedServiceResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Service'
        total:
          type: integer
        page:
          type: integer
        pageSize:
          type: integer
    PaginatedMessageResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        total:
          type: integer
        page:
          type: integer
        pageSize:
          type: integer
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        isVerified:
          type: boolean
        role:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Technician:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        isVerified:
          type: boolean
        role:
          type: string
        categoryId:
          type: integer
        verificationStatus:
          type: string
        availabilityStatus:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Service:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
        technicianId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time 